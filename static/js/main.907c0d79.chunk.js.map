{"version":3,"sources":["patternRecognition/dataset.png","components/Header.js","components/Home.js","patternRecognition/dataset.js","patternRecognition/model.js","components/StatusChart.js","patternRecognition/Results.js","patternRecognition/Collapse.js","patternRecognition/PatternRecognition.js","webcam/Webcam.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","headerContainerStyle","background","height","headerMenuStyle","borderBottom","headerItemStyle","color","Header","react_default","a","createElement","layout","id","style","menu","fixed","mode","Item","react_router_dom","to","Object","objectSpread","fontSize","fontWeight","Home","Content","marginTop","row","type","justify","align","col","span","offset","IMAGE_H","IMAGE_W","IMAGE_SIZE","NUM_TRAIN_ELEMENTS","NUM_TEST_ELEMENTS","PatternRecognitionData","classCallCheck","this","shuffledTrainIndex","shuffledTestIndex","createClass","key","value","_load","asyncToGenerator","regenerator_default","mark","_callee","img","canvas","ctx","imgRequest","labelsRequest","_ref","_ref2","labelsResponse","_this","wrap","_context","prev","next","Image","document","getContext","Promise","resolve","reject","crossOrigin","onload","width","naturalWidth","naturalHeight","datasetBytesBuffer","ArrayBuffer","i","NUM_DATASET_ELEMENTS","datasetBytesView","Float32Array","drawImage","imageData","getImageData","j","data","length","datasetImages","src","fetch","all","sent","slicedToArray","t0","Uint8Array","arrayBuffer","t1","datasetLabels","trainIndices","tf","createShuffledIndices","testIndices","trainImages","slice","testImages","trainLabels","testLabels","stop","apply","arguments","xs","labels","numExamples","getModel","model","add","flatten","inputShape","dense","units","activation","optimizer","adam","compile","loss","metrics","StatusChart","props","possibleConstructorReturn","getPrototypeOf","call","chart","Math","random","updateStep","prevProps","_this$props","trainData","valData","series","update","_this$props2","yTitle","options","credits","enabled","title","text","xAxis","xTitle","yAxis","minPadding","maxPadding","legend","exporting","plotOptions","lineWidth","marker","name","filter","Boolean","Highcharts","destroy","card","padding","React","Component","Results","es_form","datasetLoading","training","es_button","labelPosition","onClick","train","trainingStatus","alignSelf","marginBottom","CollapseInfo","paddingBottom","collapse","defaultActiveKey","accordian","Panel","header","href","target","rel","patternRecognition_Results","dataLoading","loadData","PatternRecognitionDemo","componentDidMount","state","datasetLoaded","_callee2","_context2","setState","load","dataLoaded","_callee5","testData","totalBatches","clients","testResult","testAccPercent","_context5","getTrainData","getTestData","ceil","fit","batchSize","validationSplit","epochs","callbacks","onBatchEnd","_onBatchEnd","_callee3","batch","logs","_context3","status","concat","toFixed","errorData","accData","acc","_x","_x2","onEpochEnd","_onEpochEnd","_callee4","epoch","_context4","errorValData","val_loss","currentEpoch","accValData","val_acc","_x3","_x4","evaluate","dataSync","trained","currentContext","predCanvas","current","clearRect","drawCanvas","drawing","imgData","fromPixels","reshape","div","predict","_callee6","_context6","outputObj","output","Array","from","prediction","indexOf","max","toConsumableArray","predictionScore","console","log","clearCanvas","clear","createRef","_this2","_this$state","components_StatusChart","trainingResults","display","float","verticalAlign","compact","content","size","positive","es","ref","canvasDraw","lazyRadius","brushRadius","canvasWidth","canvasHeight","className","Collapse","BORDER_COLOR","LABEL_COLOR","WebcamDemo","loadModel","loading","addClient","cocoSsd","detectFrame","cam","detect","video","then","predictions","renderPredictions","requestAnimationFrame","canvasRef","font","textBaseline","forEach","_prediction$bbox","bbox","x","y","strokeStyle","strokeRect","fillStyle","textWidth","measureText","class","fillRect","fillText","loaded","setTimeout","onAccordionClick","e","titleProps","index","activeIndex","Accordian","position","raised","react_webcam_default","webcam","audio","App","basename","components_Header","react_router","path","component","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.907c0d79.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dataset.649191b6.png\";","import React from 'react';\nimport { Menu, Layout } from 'antd'\nimport { Link } from \"react-router-dom\";\n\nconst headerContainerStyle = {\n  background: 'linear-gradient(180deg,#031d6a,#000e48)',\n  height: '58px'\n};\n\nconst headerMenuStyle = {\n  background: 'linear-gradient(180deg,#031d6a,#000e48)',\n  borderBottom: 'none'\n};\n\nconst headerItemStyle = {\n  color: 'white'\n}\n\nconst Header = () => (\n  <Layout.Header id=\"layoutHeader\" style={headerContainerStyle}>\n    <Menu fixed='top'  mode='horizontal' style={headerMenuStyle}>\n        <Menu.Item><Link to=\"/\" style={{...headerItemStyle, fontSize: '1.2em', fontWeight: 'bold'}}>enclaveML</Link></Menu.Item>\n        <Menu.Item><Link to=\"/webcam\" style={headerItemStyle}>Webcam Demo</Link></Menu.Item>\n        <Menu.Item><Link to=\"/pattern_recognition\" style={headerItemStyle}>Pattern Recognition Demo</Link></Menu.Item>\n    </Menu>\n  </Layout.Header>\n);\n\nexport default Header;","import React from 'react';\nimport { Layout, Row, Col } from 'antd'\nimport { Link } from \"react-router-dom\";\n\n\nconst Home = () => (\n  <Layout.Content style={{marginTop:'50px'}}>\n    <Row type=\"flex\" justify=\"start\" align=\"middle\">\n      <Col span={12} offset={4}>\n        <h1>enclaveML</h1>\n      </Col>\n      </Row>\n      <Row type=\"flex\" justify=\"start\" align=\"middle\">\n      <Col span={12} offset={4}>\n        <p>enclaveML is an experimental framework for tokenized federated learning.</p>\n        <p>It aims to accomplish the following goals:</p>\n        <ul>\n          <li>Allow the training of many types of machine learning models without requiring the transmission of private client-side data</li>\n          <li>Track and tokenize the contributed delta from participating clients, facilitating a crypto-economic primitive around the decentralized training of machine learning models.\n          </li>\n        </ul>\n        \n      </Col>\n    </Row>\n  </Layout.Content>\n);\n\nexport default Home;","import * as tf from '@tensorflow/tfjs';\n\nexport const IMAGE_H = 28;\nexport const IMAGE_W = 28;\nconst IMAGE_SIZE = IMAGE_H * IMAGE_W;\nconst NUM_CLASSES = 10;\nconst NUM_DATASET_ELEMENTS = 65000;\n\nexport const NUM_TRAIN_ELEMENTS = 55000;\nconst NUM_TEST_ELEMENTS = NUM_DATASET_ELEMENTS - NUM_TRAIN_ELEMENTS;\n\nconst MNIST_IMAGES_SPRITE_PATH =\n    'https://storage.googleapis.com/learnjs-data/model-builder/mnist_images.png';\nconst MNIST_LABELS_PATH =\n    'https://storage.googleapis.com/learnjs-data/model-builder/mnist_labels_uint8';\n\n/**\n * A class that fetches the sprited MNIST dataset and returns shuffled batches.\n */\n\nexport class PatternRecognitionData {\n\n    constructor() {\n        this.shuffledTrainIndex = 0;\n        this.shuffledTestIndex = 0;\n    }\n\n    async load() {\n        // Make a request for the MNIST sprited image.\n        const img = new Image();\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        const imgRequest = new Promise((resolve, reject) => {\n            img.crossOrigin = '';\n            img.onload = () => {\n                img.width = img.naturalWidth;\n                img.height = img.naturalHeight;\n\n                const datasetBytesBuffer =\n                    new ArrayBuffer(NUM_DATASET_ELEMENTS * IMAGE_SIZE * 4);\n\n                const chunkSize = 5000;\n                canvas.width = img.width;\n                canvas.height = chunkSize;\n\n                for (let i = 0; i < NUM_DATASET_ELEMENTS / chunkSize; i++) {\n                    const datasetBytesView = new Float32Array(\n                        datasetBytesBuffer, i * IMAGE_SIZE * chunkSize * 4,\n                        IMAGE_SIZE * chunkSize);\n                    ctx.drawImage(\n                        img, 0, i * chunkSize, img.width, chunkSize, 0, 0, img.width,\n                        chunkSize);\n\n                    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n                    for (let j = 0; j < imageData.data.length / 4; j++) {\n                        // All channels hold an equal value since the image is grayscale, so\n                        // just read the red channel.\n                        datasetBytesView[j] = imageData.data[j * 4] / 255;\n                    }\n                }\n                this.datasetImages = new Float32Array(datasetBytesBuffer);\n\n                resolve();\n            };\n            img.src = MNIST_IMAGES_SPRITE_PATH;\n        });\n\n        const labelsRequest = fetch(MNIST_LABELS_PATH);\n        const [imgResponse, labelsResponse] =\n            await Promise.all([imgRequest, labelsRequest]);\n\n        this.datasetLabels = new Uint8Array(await labelsResponse.arrayBuffer());\n\n        // Create shuffled indices into the train/test set for when we select a\n        // random dataset element for training / validation.\n        this.trainIndices = tf.util.createShuffledIndices(NUM_TRAIN_ELEMENTS);\n        this.testIndices = tf.util.createShuffledIndices(NUM_TEST_ELEMENTS);\n\n        // Slice the the images and labels into train and test sets.\n        this.trainImages =\n            this.datasetImages.slice(0, IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\n        this.testImages = this.datasetImages.slice(IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\n        this.trainLabels =\n            this.datasetLabels.slice(0, NUM_CLASSES * NUM_TRAIN_ELEMENTS);\n        this.testLabels =\n            this.datasetLabels.slice(NUM_CLASSES * NUM_TRAIN_ELEMENTS);\n    }\n\n    /**\n       * Get all training data as a data tensor and a labels tensor.\n       */\n    getTrainData() {\n        const xs = tf.tensor4d(\n            this.trainImages,\n            [this.trainImages.length / IMAGE_SIZE, IMAGE_H, IMAGE_W, 1]);\n        const labels = tf.tensor2d(\n            this.trainLabels, [this.trainLabels.length / NUM_CLASSES, NUM_CLASSES]);\n        return { xs, labels };\n    }\n\n    /**\n     * Get all test data as a data tensor a a labels tensor.\n     */\n    getTestData(numExamples) {\n        let xs = tf.tensor4d(\n            this.testImages,\n            [this.testImages.length / IMAGE_SIZE, IMAGE_H, IMAGE_W, 1]);\n        let labels = tf.tensor2d(\n            this.testLabels, [this.testLabels.length / NUM_CLASSES, NUM_CLASSES]);\n\n        if (numExamples != null) {\n            xs = xs.slice([0, 0, 0, 0], [numExamples, IMAGE_H, IMAGE_W, 1]);\n            labels = labels.slice([0, 0], [numExamples, NUM_CLASSES]);\n        }\n        return { xs, labels };\n    }\n}","import * as tf from '@tensorflow/tfjs';\nimport { IMAGE_H, IMAGE_W } from './dataset';\n\nexport function getModel() {\n    const model = tf.sequential();\n    model.add(tf.layers.flatten({ inputShape: [IMAGE_H, IMAGE_W, 1] }));\n    model.add(tf.layers.dense({ units: 42, activation: 'relu' }));\n    model.add(tf.layers.dense({ units: 10, activation: 'softmax' }));\n\n    const optimizer = tf.train.adam();\n    model.compile({\n        optimizer,\n        loss: 'categoricalCrossentropy',\n        metrics: ['accuracy'],\n    });\n\n    return model;\n}\n\nexport function getConvModel() {\n    const model = tf.sequential();\n    model.add(tf.layers.conv2d({\n        inputShape: [IMAGE_H, IMAGE_W, 1],\n        kernelSize: 5,\n        filters: 8,\n        strides: 1,\n        activation: 'relu',\n        kernelInitializer: 'varianceScaling'\n    }));\n    model.add(tf.layers.maxPooling2d({ poolSize: [2, 2], strides: [2, 2] }));\n    model.add(tf.layers.conv2d({\n        kernelSize: 5,\n        filters: 16,\n        strides: 1,\n        activation: 'relu',\n        kernelInitializer: 'varianceScaling'\n    }));\n    model.add(tf.layers.maxPooling2d({ poolSize: [2, 2], strides: [2, 2] }));\n    model.add(tf.layers.flatten());\n    const NUM_OUTPUT_CLASSES = 10;\n    model.add(tf.layers.dense({\n        units: NUM_OUTPUT_CLASSES,\n        kernelInitializer: 'varianceScaling',\n        activation: 'softmax'\n    }));\n\n    const optimizer = tf.train.adam();\n    model.compile({\n        optimizer: optimizer,\n        loss: 'categoricalCrossentropy',\n        metrics: ['accuracy'],\n    });\n\n    return model;\n}","import React from 'react';\nimport Highcharts from 'highcharts';\nimport { Row, Card } from 'antd';\n\nclass StatusChart extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.chart = null;\n        this.id = 'chart' + Math.random();\n        this.updateStep = props.updateStep || 10;\n    }\n\n    componentDidUpdate(prevProps) {\n        const { trainData, valData } = this.props;\n        if (prevProps.trainData !== trainData && (trainData.length % this.updateStep === 0)) {\n            this.chart.series[0].update({ data: trainData });\n        }\n\n        if (prevProps.valData !== valData) {\n            this.chart.series[1].update({ data: valData });\n        }\n    }\n\n    componentDidMount() {\n        const { trainData, valData, yTitle, xTitle } = this.props\n        const options = {\n            chart: {\n                type: 'line',\n                height: 250,\n            },\n            credits: {\n                enabled: false\n            },\n            title: {\n                text: ''\n            },\n            xAxis: {\n                enabled: true,\n                title: {\n                    text: xTitle || 'batch'\n                }\n            },\n            yAxis: {\n                title: {\n                    text: yTitle\n                },\n                minPadding: 0,\n                maxPadding: 0\n            },\n            legend: {\n                enabled: valData ? true : false,\n            },\n            exporting: {\n                enabled: false\n            },\n            plotOptions: {\n                series: {\n                    lineWidth: 1,\n                    marker: {\n                        enabled: false\n                    }\n                }\n            },\n            series: [\n                { id: 'train', name: 'Prediction', data: trainData },\n                (valData ? { id: 'val', name: 'Validation', data: valData } : false)\n            ].filter(Boolean)\n        };\n        this.chart = new Highcharts.chart(this.id, options);\n    }\n\n    componentWillUnmount() {\n        this.chart.destroy();\n    }\n\n    render() {\n        return (\n                <Row>\n                <Card><b>{this.props.title}</b></Card>\n                <Card style={{ padding: 0 }}>\n                    <div id={this.id} />\n                </Card>\n                </Row>\n        );\n    }\n\n}\n\nexport default StatusChart;\n","import React from 'react';\nimport { Dropdown, Button, Form, Tag, Menu } from 'antd';\n\nconst Results = props => (\n    <Form>\n          {props.datasetLoading && <div>Loading...</div>}\n\n            {!props.datasetLoading && !props.training &&\n                <Button\n                    labelPosition='right'\n                    onClick={props.train}\n                >Start Training</Button>\n            }\n\n            {props.trainingStatus &&\n                <Form.Item style={{ alignSelf: 'flex-end', marginBottom: 2 }}>\n                    {props.trainingStatus}\n                </Form.Item>\n            }\n    </Form>\n);\n\nexport default Results;","import React, { Component } from 'react';\nimport { Collapse, Icon } from 'antd';\nimport datasetExample from './dataset.png';\nimport Results from './Results';\n\nconst CollapseInfo = props => (\n            <div style={{ paddingBottom: 20 }}>\n                <Collapse defaultActiveKey={['1']} accordian>\n                    <Collapse.Panel header=\"Pattern Recognition Demo\" key=\"1\">\n                        <p>\n                            This proof-of-concept demonstrates federated learning on a pattern recognition model using handwritten numerical images stored on the client.\n                        </p>\n                        <p>More info <a href='http://yann.lecun.com/exdb/mnist/' target=\"_blank\" rel=\"noopener noreferrer\">More info on NIST</a>.</p>\n                        <Results\n                            dataLoading={props.dataLoading}\n                            loadData={props.loadData}\n                            train={props.train}\n                            training={props.training}\n                            trainingStatus={props.trainingStatus}\n                        />\n                    </Collapse.Panel>\n                </Collapse>\n            </div>\n);\n\n\nexport default CollapseInfo;\n","import React from 'react';\nimport { Layout, Row, Col, Button, Card } from 'antd';\nimport { IMAGE_H, IMAGE_W, NUM_TRAIN_ELEMENTS, PatternRecognitionData } from './dataset';\nimport { getModel } from './model';\nimport CanvasDraw from \"react-canvas-draw\";\nimport StatusChart from '../components/StatusChart';\nimport Collapse from './Collapse';\nimport * as tf from '@tensorflow/tfjs';\n\nclass PatternRecognitionDemo extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            dataLoaded: false,\n            dataLoading: true,\n            training: false,\n            trained: false,\n            trainingStatus: null,\n            errorData: [],\n            errorValData: [],\n            accData: [],\n            accValData: [],\n            prediction: null,\n            predictionScore: null,\n            clients: 0,\n            currentEpoch: 0\n        }\n        this.predCanvas = React.createRef();\n    }\n    \n    componentDidMount = async () => {\n        if (!this.state.datasetLoaded) this.loadData();\n    }\n\n    loadData = async () => {\n        this.setState({ dataLoading: true });\n        this.data = new PatternRecognitionData();\n        await this.data.load();\n        this.setState({ dataLoaded: true, dataLoading: false });\n    }\n\n    train = async () => {\n        this.setState({ training: true, trainingStatus: 'Training model...' });\n        this.model = getModel();\n\n        const batchSize = 550;\n        const validationSplit = 0.15;\n        const trainEpochs = 3;\n\n        const trainData = this.data.getTrainData();\n        const testData = this.data.getTestData();\n\n        const totalBatches = Math.ceil(NUM_TRAIN_ELEMENTS * (1 - validationSplit) / batchSize) * trainEpochs;\n        const clients = this.state.clients || 0;\n        await this.model.fit(trainData.xs, trainData.labels, {\n            batchSize,\n            validationSplit,\n            epochs: trainEpochs,\n            callbacks: {\n                onBatchEnd: async (batch, logs) => {\n                    this.setState({\n                        status: `Training... (${((clients + 1) / totalBatches * 100).toFixed(1)}% complete)`,\n                        clients: clients + 1, \n                        errorData: this.state.errorData.concat(logs.loss),\n                        accData: this.state.accData.concat(logs.acc)\n                    });\n                    await tf.nextFrame();\n                },\n                onEpochEnd: async (epoch, logs) => {\n                    this.setState({\n                        errorValData: this.state.errorValData.concat([[this.state.clients, logs.val_loss]]),\n                        currentEpoch: this.state.currentEpoch + 1, \n                        accValData: this.state.accValData.concat([[this.state.clients, logs.val_acc]])\n                    });\n                    await tf.nextFrame();\n                }\n            }\n        });\n\n        const testResult = this.model.evaluate(testData.xs, testData.labels);\n        const testAccPercent = testResult[1].dataSync()[0] * 100;\n\n        this.setState({\n            trained: true,\n            status: `Final test accuracy: ${testAccPercent.toFixed(1)}%`\n        });\n    }\n\n    getImageData = () => {\n        const currentContext = this.predCanvas.current.getContext('2d');\n        currentContext.clearRect(0, 0, IMAGE_W, IMAGE_H);\n        currentContext.drawImage(this.drawCanvas.canvas.drawing, 0, 0, IMAGE_W, IMAGE_H);\n        const imgData = currentContext.getImageData(0, 0, IMAGE_W, IMAGE_H);\n\n        let img = tf.browser.fromPixels(imgData, 1)\n        img = img.reshape([1, 28, 28, 1]);\n        img = tf.cast(img, 'float32');\n        return img.div(tf.scalar(255));\n    }\n\n    predict = async () => {\n        await tf.tidy(() => {\n            const imgData = this.getImageData()\n            const outputObj = this.model.predict(imgData).dataSync();\n            const output = Array.from(outputObj);\n\n            const prediction = output.indexOf(Math.max(...output));\n            const predictionScore = output[prediction] * 100;\n\n            console.log(output);\n            console.log(prediction);\n            console.log(predictionScore);\n\n            this.setState({ prediction: prediction, predictionScore: predictionScore.toFixed(1) });\n        });\n    }\n\n    clearCanvas = () => {\n        this.drawCanvas.clear();\n        const currentContext = this.predCanvas.current.getContext('2d');\n        currentContext.clearRect(0, 0, IMAGE_W, IMAGE_H);\n        this.setState({ prediction: null, predictionScore: null });\n    }\n\n    render() {\n        const { errorData, accData, prediction, trained, training, status, dataLoading } = this.state;\n        \n        const trainingStatus =  (<Row>\n                                {this.state.clients > 0 && <Row><h4>Federated Clients: {this.state.clients}</h4> </Row>}\n                                {errorData.length > 0 &&\n                                    <Col>\n                                        <StatusChart\n                                            title=\"Prediction Error\"\n                                            trainData={errorData}\n                                            valData={this.state.errorValData}\n                                            yTitle=\"error\"\n                                        />\n                                    </Col>\n                                }\n                              \n                                {accData.length > 0 &&\n                                    <Col>\n                                        <StatusChart\n                                            title=\"Prediction Accuracy\"\n                                            trainData={accData}\n                                            valData={this.state.accValData}\n                                            yTitle=\"accuracy\"\n                                        />\n                                    </Col>\n                                }\n                            </Row>);\n                            \n        const trainingResults = trained && (\n              <Row>\n                  <Col>\n                          <Card>\n                            \n                              <span style={{ display: 'inline', float: 'right', verticalAlign: 'top' }}>\n                                  <Button compact\n                                      content='Clear'\n                                      onClick={this.clearCanvas}\n                                      size='small'\n                                  />\n                                  <Button compact positive\n                                      content={'Predict'}\n                                      onClick={this.predict}\n                                      size='small'\n                                  />\n                              </span>\n                          </Card>\n                          <Card style={{ padding: 0 }}>\n                              <CanvasDraw\n                                  ref={canvasDraw => (this.drawCanvas = canvasDraw)}\n                                  lazyRadius={0}\n                                  brushRadius={40}\n                                  canvasWidth={\"100%\"}\n                                  canvasHeight={540}\n                              />\n                          </Card>\n                  </Col>\n                  <Col>\n                      \n                          <Card><b>Prediction</b></Card>\n                          <Card style={{ height: 540 }}>\n              \n                                  <Card type=\"inner\">\n                                      <Layout.Content verticalAlign='top'>\n                                          <div className='item-header'>{\n                                              prediction !== null\n                                                  ? \"Neural network input (28 x 28 pixels):\"\n                                                  : \"Draw any number and press 'Predict'.\"\n                                          }\n                                        </div>\n                                          <canvas ref={this.predCanvas} width={28} height={28} />\n                                      </Layout.Content>\n                                  </Card>\n                                  {prediction !== null &&\n                                      <Card  type=\"inner\">\n                                          <Layout.Content verticalAlign='middle'>\n                                              <div className='item-header'>\n                                                  Prediction: {prediction}\n                                              </div>\n                                          </Layout.Content>\n                                      </Card>\n                                  }\n                                  {prediction !== null &&\n                                      <Card type=\"inner\">\n                                          <Layout.Content verticalAlign='middle'>\n                                              <div className='item-header'>\n                                                  Prediction accuracy: {this.state.predictionScore}%\n                                              </div>\n                                          </Layout.Content>\n                                      </Card>\n                                  }\n                          </Card>\n                  </Col>\n              </Row>\n        );\n        \n        \n        return (\n            <Layout.Content style={{ padding: '5em 0em' }}>\n              <Row>\n               <Col span={12} offset={4}>\n                <Collapse\n                  trainingStatus={trainingStatus} \n                  trainingResults={trainingResults}\n                  dataLoading={dataLoading}\n                  loadData={this.loadData}\n                  train={this.train}\n                  training={training}\n                />\n              </Col>\n            </Row>\n            </Layout.Content>\n        );\n    }\n    \n    \n}\n\nexport default PatternRecognitionDemo;\n\n\n/*\n\n*/\n","import React from 'react';\nimport { Layout, Card, Collapse, Button, Row, Col } from 'antd';\nimport Webcam from 'react-webcam';\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\n\nconst BORDER_COLOR = '#031d6a';\nconst LABEL_COLOR = '#ffffff';\n\nclass WebcamDemo extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            loaded: false,\n            loading: false,\n            activeIndex: 0,\n            clients: 0\n        }\n        this.cam = null;\n        this.canvasRef = React.createRef();\n    }\n\n    \n    loadModel = async () => {\n      console.log('loading');\n        this.setState({ loading: true });\n        this.addClient();\n        this.model = await cocoSsd.load();\n    }\n\n    detectFrame = () => {\n        if (!this.cam){\n          console.log('webcam not available');\n          return null;\n        }\n        \n        this.model.detect(this.cam.video)\n            .then(predictions => {\n                this.renderPredictions(predictions);\n                requestAnimationFrame(() => this.detectFrame());\n            });\n    }\n\n    renderPredictions = predictions => {\n      if (!this.cam){\n        console.log('webcam not available');\n        return null;\n      }\n        const ctx = this.canvasRef.current.getContext(\"2d\");\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        ctx.font = \"16px sans-serif\";\n        ctx.textBaseline = \"top\";\n        predictions.forEach(prediction => {\n            const [x, y, width, height] = prediction.bbox;\n            // Bounding box\n            ctx.strokeStyle = BORDER_COLOR;\n            ctx.lineWidth = 4;\n            ctx.strokeRect(x, y, width, height);\n            // Label background\n            ctx.fillStyle = BORDER_COLOR;\n            const textWidth = ctx.measureText(prediction.class).width;\n            ctx.fillRect(x, y, textWidth + 4, 20);\n            // Label text\n            ctx.fillStyle = LABEL_COLOR;\n            ctx.fillText(prediction.class, x, y);\n        });\n    }\n\n    addClient = () => {\n      this.setState({ clients: this.state.clients + 1});\n      if (this.state.clients > 100){\n        this.setState({ loaded: true, loading: false }, () => this.detectFrame());\n      }else{ \n        setTimeout(this.addClient, 50);\n      }\n      \n    }\n    \n    \n    onAccordionClick = (e, titleProps) => {\n        const { index } = titleProps;\n        const { activeIndex } = this.state;\n        this.setState({ activeIndex: activeIndex === index ? -1 : index })\n    }\n\n    render() {\n        const { loaded, loading, activeIndex, clients } = this.state;\n        \n        const Accordian = (\n          <div style={{ paddingBottom: 20 }}>\n              <Collapse defaultActiveKey={['1']} accordian>\n                \n                  <Collapse.Panel header=\"Webcam Object Detection\" key=\"1\">\n                      <p>\n                          This webcam demo simulates federated learning training of a Single Shot MultiBox Detection object recognition model. \n                      </p>\n                      \n                      \n                      {loaded &&\n                          <Row><Col>\n                            <Card style={{ position: 'relative', height: 540, width: 680, padding: 8 }} raised>\n                              <canvas\n                                  ref={this.canvasRef}\n                                  style={{ position: 'absolute' }}\n                                  width=\"640\"\n                                  height=\"510\"\n                              />\n                              <Webcam\n                                  ref={webcam => { this.cam = webcam }}\n                                  audio={false}\n                              />\n                          </Card>\n                          </Col></Row>\n                      }\n                    \n                  </Collapse.Panel>\n              </Collapse>\n            </div>\n        );\n        \n        return (\n            <Layout.Content style={{ padding: '5em 0em' }}>\n              <Row>\n                <Col span={12} offset={2}>\n              \n                {!loaded && !loading && <Button onClick={this.loadModel}>Load Webcam Demo</Button>}\n                {loading && <Row><h4>Federated Clients: {clients}</h4></Row>}\n                {loaded && Accordian}\n                </Col>\n            </Row>\n                \n            </Layout.Content>\n        );\n    }\n}\n\nexport default WebcamDemo;\n\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport PatternRecognitionDemo from './patternRecognition/PatternRecognition';\nimport WebcamDemo from './webcam/Webcam';\nimport 'antd/dist/antd.css';\n\nclass App extends Component {\n\n  constructor(props) {\n      super(props);\n      this.state = { loaded: false };\n  }\n\n  render() {\n    return (\n      <Router basename=\"/\">\n        <div>\n          <Header />\n          <div>\n            <Route path=\"/\" component={Home} />\n            <Route path=\"/pattern_recognition\" component={PatternRecognitionDemo} />\n            <Route path=\"/webcam\" component={WebcamDemo} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}